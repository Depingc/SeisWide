#pragma once

#include "ealloc_d.h"
//#include "util.h"

typedef double real;
typedef dcomplex real_complex;


#define NTAB 240
static struct {
	int n;  float c;
} nctab[NTAB] = {
	{ 1, 0.000052f },
	{ 2, 0.000061f },
	{ 3, 0.000030f },
	{ 4, 0.000053f },
	{ 5, 0.000066f },
	{ 6, 0.000067f },
	{ 7, 0.000071f },
	{ 8, 0.000062f },
	{ 9, 0.000079f },
	{ 10, 0.000080f },
	{ 11, 0.000052f },
	{ 12, 0.000069f },
	{ 13, 0.000103f },
	{ 14, 0.000123f },
	{ 15, 0.000050f },
	{ 16, 0.000086f },
	{ 18, 0.000108f },
	{ 20, 0.000101f },
	{ 21, 0.000098f },
	{ 22, 0.000135f },
	{ 24, 0.000090f },
	{ 26, 0.000165f },
	{ 28, 0.000084f },
	{ 30, 0.000132f },
	{ 33, 0.000158f },
	{ 35, 0.000138f },
	{ 36, 0.000147f },
	{ 39, 0.000207f },
	{ 40, 0.000156f },
	{ 42, 0.000158f },
	{ 44, 0.000176f },
	{ 45, 0.000171f },
	{ 48, 0.000185f },
	{ 52, 0.000227f },
	{ 55, 0.000242f },
	{ 56, 0.000194f },
	{ 60, 0.000215f },
	{ 63, 0.000233f },
	{ 65, 0.000288f },
	{ 66, 0.000271f },
	{ 70, 0.000248f },
	{ 72, 0.000247f },
	{ 77, 0.000285f },
	{ 78, 0.000395f },
	{ 80, 0.000285f },
	{ 84, 0.000209f },
	{ 88, 0.000332f },
	{ 90, 0.000321f },
	{ 91, 0.000372f },
	{ 99, 0.000400f },
	{ 104, 0.000391f },
	{ 105, 0.000358f },
	{ 110, 0.000440f },
	{ 112, 0.000367f },
	{ 117, 0.000494f },
	{ 120, 0.000413f },
	{ 126, 0.000424f },
	{ 130, 0.000549f },
	{ 132, 0.000480f },
	{ 140, 0.000450f },
	{ 143, 0.000637f },
	{ 144, 0.000497f },
	{ 154, 0.000590f },
	{ 156, 0.000626f },
	{ 165, 0.000654f },
	{ 168, 0.000536f },
	{ 176, 0.000656f },
	{ 180, 0.000611f },
	{ 182, 0.000730f },
	{ 195, 0.000839f },
	{ 198, 0.000786f },
	{ 208, 0.000835f },
	{ 210, 0.000751f },
	{ 220, 0.000826f },
	{ 231, 0.000926f },
	{ 234, 0.000991f },
	{ 240, 0.000852f },
	{ 252, 0.000820f },
	{ 260, 0.001053f },
	{ 264, 0.000987f },
	{ 273, 0.001152f },
	{ 280, 0.000952f },
	{ 286, 0.001299f },
	{ 308, 0.001155f },
	{ 312, 0.001270f },
	{ 315, 0.001156f },
	{ 330, 0.001397f },
	{ 336, 0.001173f },
	{ 360, 0.001259f },
	{ 364, 0.001471f },
	{ 385, 0.001569f },
	{ 390, 0.001767f },
	{ 396, 0.001552f },
	{ 420, 0.001516f },
	{ 429, 0.002015f },
	{ 440, 0.001748f },
	{ 455, 0.001988f },
	{ 462, 0.001921f },
	{ 468, 0.001956f },
	{ 495, 0.002106f },
	{ 504, 0.001769f },
	{ 520, 0.002196f },
	{ 528, 0.002127f },
	{ 546, 0.002454f },
	{ 560, 0.002099f },
	{ 572, 0.002632f },
	{ 585, 0.002665f },
	{ 616, 0.002397f },
	{ 624, 0.002711f },
	{ 630, 0.002496f },
	{ 660, 0.002812f },
	{ 693, 0.002949f },
	{ 715, 0.003571f },
	{ 720, 0.002783f },
	{ 728, 0.003060f },
	{ 770, 0.003392f },
	{ 780, 0.003553f },
	{ 792, 0.003198f },
	{ 819, 0.003726f },
	{ 840, 0.003234f },
	{ 858, 0.004354f },
	{ 880, 0.003800f },
	{ 910, 0.004304f },
	{ 924, 0.003975f },
	{ 936, 0.004123f },
	{ 990, 0.004517f },
	{ 1001, 0.005066f },
	{ 1008, 0.003902f },
	{ 1040, 0.004785f },
	{ 1092, 0.005017f },
	{ 1144, 0.005599f },
	{ 1155, 0.005380f },
	{ 1170, 0.005730f },
	{ 1232, 0.005323f },
	{ 1260, 0.005112f },
	{ 1287, 0.006658f },
	{ 1320, 0.005974f },
	{ 1365, 0.006781f },
	{ 1386, 0.006413f },
	{ 1430, 0.007622f },
	{ 1456, 0.006679f },
	{ 1540, 0.007032f },
	{ 1560, 0.007538f },
	{ 1584, 0.007126f },
	{ 1638, 0.007979f },
	{ 1680, 0.007225f },
	{ 1716, 0.008961f },
	{ 1820, 0.008818f },
	{ 1848, 0.008427f },
	{ 1872, 0.009004f },
	{ 1980, 0.009398f },
	{ 2002, 0.010830f },
	{ 2145, 0.012010f },
	{ 2184, 0.010586f },
	{ 2288, 0.012058f },
	{ 2310, 0.011673f },
	{ 2340, 0.011700f },
	{ 2520, 0.011062f },
	{ 2574, 0.014313f },
	{ 2640, 0.013021f },
	{ 2730, 0.014606f },
	{ 2772, 0.013216f },
	{ 2860, 0.015789f },
	{ 3003, 0.016988f },
	{ 3080, 0.014911f },
	{ 3120, 0.016393f },
	{ 3276, 0.016741f },
	{ 3432, 0.018821f },
	{ 3465, 0.018138f },
	{ 3640, 0.018892f },
	{ 3696, 0.018634f },
	{ 3960, 0.020216f },
	{ 4004, 0.022455f },
	{ 4095, 0.022523f },
	{ 4290, 0.026087f },
	{ 4368, 0.023474f },
	{ 4620, 0.024590f },
	{ 4680, 0.025641f },
	{ 5005, 0.030303f },
	{ 5040, 0.025253f },
	{ 5148, 0.030364f },
	{ 5460, 0.031250f },
	{ 5544, 0.029412f },
	{ 5720, 0.034404f },
	{ 6006, 0.037500f },
	{ 6160, 0.034091f },
	{ 6435, 0.040214f },
	{ 6552, 0.037221f },
	{ 6864, 0.042735f },
	{ 6930, 0.040214f },
	{ 7280, 0.042980f },
	{ 7920, 0.045872f },
	{ 8008, 0.049505f },
	{ 8190, 0.049834f },
	{ 8580, 0.055762f },
	{ 9009, 0.057034f },
	{ 9240, 0.054945f },
	{ 9360, 0.056818f },
	{ 10010, 0.066667f },
	{ 10296, 0.065502f },
	{ 10920, 0.068182f },
	{ 11088, 0.065217f },
	{ 11440, 0.075000f },
	{ 12012, 0.078534f },
	{ 12870, 0.087719f },
	{ 13104, 0.081081f },
	{ 13860, 0.084270f },
	{ 15015, 0.102740f },
	{ 16016, 0.106383f },
	{ 16380, 0.105634f },
	{ 17160, 0.119048f },
	{ 18018, 0.123967f },
	{ 18480, 0.119048f },
	{ 20020, 0.137615f },
	{ 20592, 0.140187f },
	{ 21840, 0.154639f },
	{ 24024, 0.168539f },
	{ 25740, 0.180723f },
	{ 27720, 0.180723f },
	{ 30030, 0.220588f },
	{ 32760, 0.241935f },
	{ 34320, 0.254237f },
	{ 36036, 0.254237f },
	{ 40040, 0.288462f },
	{ 45045, 0.357143f },
	{ 48048, 0.357143f },
	{ 51480, 0.384615f },
	{ 55440, 0.384615f },
	{ 60060, 0.454545f },
	{ 65520, 0.517241f },
	{ 72072, 0.576923f },
	{ 80080, 0.625000f },
	{ 90090, 0.833333f },
	{ 102960, 0.789474f },
	{ 120120, 1.153846f },
	{ 144144, 1.153846f },
	{ 180180, 1.875000f },
	{ 240240, 2.500000f },
	{ 360360, 3.750000f },
	{ 720720, 7.500000f },
};

/* Prime Factor FFTs */
int npfa(int nmin);
int npfao(int nmin, int nmax);
int npfar(int nmin);
int npfaro(int nmin, int nmax);
void pfacc(int isign, int n, complex z[]);
void pfarc(int isign, int n, float rz[], complex cz[]);
void pfacr(int isign, int n, complex cz[], float rz[]);
void pfa2cc(int isign, int idim, int n1, int n2, complex z[]);
void pfa2rc(int isign, int idim, int n1, int n2, float rz[], complex cz[]);
void pfa2cr(int isign, int idim, int n1, int n2, complex cz[], float rz[]);
void pfamcc(int isign, int n, int nt, int k, int kt, complex z[]);



void intlin(int nin, float xin[], float yin[], float yinl, float yinr,
	int nout, float xout[], float yout[]);


/* prototype of function used internally */
static void convolve_cwp_s(int, int, float*, int, int, float*, int, int, float*);

void convolve_cwp(int lx, int ifx, float *x,
	int ly, int ify, float *y,
	int lz, int ifz, float *z);

/* internal function optimized for short x */
static void convolve_cwp_s(int lx, int ifx, float *x,
	int ly, int ify, float *y,
	int lz, int ifz, float *z);



void gaussian1d_smoothing(int ns, int nsr, float *data);
